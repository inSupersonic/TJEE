FSM bighomework
简介
在本实验中，你将设计一个有限状态机 (FSM) 来实现一款冒险游戏！你将使用 Verilog 实现你的有限状态机 (FS)，然后使用 HDL 模拟器进行游戏仿真，最后使用 HDL 模拟器运行你的游戏。
请仔细阅读并遵循本实验的步骤。开始之前，请务必阅读完整实验内容，并参考实验末尾的“作业要求”部分。

你将使用图 2 中列出的系统化设计步骤来设计你的有限状态机 (FSM)。部分步骤将提供，其他步骤则完全由你自行决定。
1. 准确陈述问题（例如，用英语）。
2. 绘制状态转换图。
3. 列出所有输入和输出。
4. 构建一个表格，展示当前状态和输入如何决定下一个状态和输出。
5. 为每个输入、状态和输出确定一个二进制编码。
6. 使用你的二进制编码重写该表格。
7. 使用表中的信息编写布尔逻辑方程。
8. 使用 Verilog HDL 实现这些方程。

你将要设计的冒险游戏包含七个房间和一个物品（一把剑）。游戏始于嘈杂洞穴 (Cave of Cacophony)。要赢得游戏，你必须先穿过蜿蜒隧道 (Twisty Tunnel) 和湍急河流 (Rapid River)。从那里，你需要在秘密剑库 (Secret Sword Stash) 中找到一把斩首剑 (Vorpal Sword)。这把剑能让你安全地穿过龙穴 (Dragon Den) 进入胜利宝库 (Victory Vault)（此时你就赢得了游戏）。如果你没有斩首剑就进入龙穴，你将被一条危险的巨龙吞噬，并进入痛苦墓地 (Grievous Graveyard)（游戏在此以你的死亡结束）。
这个游戏可以使用两个相互通信的独立状态机来实现。一个状态机跟踪你所在的房间，而另一个状态机跟踪你当前是否拥有这把剑。

房间有限状态机 (FSM) 如图 3 所示。在此状态机中，每个状态对应一个不同的房间。重置（输入“R”）后，状态机状态将变为“嘈杂洞穴 (Cave of Cacophony)”。玩家可以使用输入 N、S、E 或 W 在不同的房间之间移动。在秘密宝剑藏匿处时，房间有限状态机的“SW”输出会向宝剑有限状态机发出信号“V”，表示玩家正在寻找宝剑。在龙穴 (Dragon Den) 时，如果玩家拥有斩首之剑 (Vorpal Sword)，宝剑有限状态机将发出信号“V”，该信号决定下一个状态是胜利宝库 (Victory Vault) 还是悲痛墓地 (Grievous Graveyard)；玩家不得提供任何方向性输入。在悲痛墓地 (Grievous Graveyard) 时，状态机生成“D”（死亡）输出；在胜利宝库 (Victory Vault) 时，状态机发出“WIN”输出。

在剑有限状态机 (Sword FSM)（图 4）中，状态分别为“无剑”和“有剑”。重置（再次输入“R”）后，机器进入“无剑”状态。进入秘剑室会导致玩家拾取一把剑，因此当“SW”输入（房间有限状态机的输出，指示玩家位于秘剑藏匿处）置位时，状态就会转换到“有剑”。一旦达到“有剑”状态，输出“V”（斩首剑）置位，机器就会保持该状态直至重置。
每个有限状态机的状态都使用 D 触发器存储。由于触发器具有时钟输入，这意味着每个有限状态机也必须有一个时钟输入，这决定了状态转换的发生时间。
到目前为止，我们已经为这两个有限状态机分别提供了英文描述和状态转换图。这分别对应于图 2 中系统设计流程的第一步和第二步。
然而，您可能已经注意到，图 3 中的图表并不完整。一些转换弧已标记，而其他一些则留空。现在，请标记所有弧，完成“房间”有限状态机 (FSM) 的状态转换图，使 FSM 能够按描述运行。
设计的下一步（步骤 3）是枚举每个 FSM 的输入和输出。图 5 显示了“房间”有限状态机 (FSM) 的输入（左侧）和输出（右侧），图 6 显示了“剑”有限状态机 (Sword FSM) 的输入和输出。请注意，出于导航目的，房间 FSM 应输出 S0-S6，指示我们的英雄位于七个房间中的哪一个。这是设计的最后一步，将由您完成。

接下来，为每个有限状态机 (FSM) 绘制一个状态转换表，展示当前状态和输入如何决定下一个状态。表格左侧应有一列表示当前状态，每个输入也应有单独的列。右侧应有一列表示下一个状态。同时，绘制输出表，左侧表示当前状态，右侧表示输出。这些表格是有限状态机的一种表示方式，可以替代图 3 和图 4 中的图表。
在房间有限状态机 (Room FSM) 表格的左侧，您无需填写所有输入值的所有可能组合（这会使表格的行数变得非常多！）。相反，对于每个状态，您只需在状态转换图中显示存在离开该状态的弧的输入组合。例如，当输入 N 被置位且当前状态为 Twisty Tunnel 时，FSM 的行为尚未指定，因此无需包含在表格中。此外，您无需在表中显示当同时指定多个方向输入时会发生什么情况的行。您可以假设同时断言多个 N、S、E 和 W 输入是非法的。因此，当一个合法方向被断言时，您可以通过将同一行的所有其他方向输入设为“无关”来简化逻辑。通过谨慎使用“无关”操作，您的表不需要包含超过 12 行。
有限状态机 (FSM) 设计的下一步是确定如何对状态进行编码。这意味着每个状态都需要分配一个唯一的 0 和 1 的组合。常见的选择包括二进制数字编码、独热编码或格雷编码。建议对 Room FSM（例如 Cave of Cacophony=0000001）使用独热编码，这样可以轻松输出当前状态 S0…S6，但您可以自由选择您认为最佳的编码。为每个 FSM 单独列出状态编码。
现在使用你选择的编码重写表格。唯一的区别是状态将以二进制数而不是名称列出。
现在你正在接近有限状态机 (FSM) 设计的核心。使用你的表格，你应该能够为每个输出和下一个状态的每个位写出一个单独的布尔逻辑方程（为每个 FSM 单独执行此操作）。在你的方程中，你可以使用下标表示状态编码的不同位：S1、S2 等。根据你选择的状态编码，表示 FSM 状态所需的位数会有所不同，因此方程的数量也会有所不同。尽可能简化你的方程。
如你所知，你可以将这些方程转换为逻辑门，以便直接在硬件中实现你的 FSM。这就是你在下一节中要做的事情。



您需要实现两个 FSM：Sword 或 Room FSM，并将它们相互连接。您可以将每个 FSM 实现为独立模块，然后创建一个包含两个 FSM 模块实例的顶层模块，并将它们相互连接；或者，您也可以在一个模块中同时实现这两个 FSM 及其连接。
顶层模块的输入和输出将决定您在游戏时模拟器中可用的信号，因此您应该确保至少包含 CLOCK、R、N、S、E 和 W 作为输入，以及当前房间 S0-S6 作为输出。添加输出端口以在模拟过程中监控 V 和 SW 的值。（请记住，如果您在一条线路上添加多个输出端口，则需要在每个附加端口之间添加一个缓冲区。）这与使用探针调试电路硬件非常相似。检查并纠正原理图中的任何错误。
3. 仿真
完成上一步后，您可以创建一个测试平台，并像之前一样使用 ModelSim 仿真设计。你的测试平台应命名为“lab03_xx_test.v”。
提交内容
1. 请注明你在本实验上花费了多少小时。这不会影响你的成绩，但对于调整下学期实验的工作量至关重要。
2. 完成“房间”有限状态机的状态转换图。
3. 你的表格，其中列出 (1) 根据当前状态和输入的下一个状态，以及 (2) 根据当前状态和输入的输出。你需要为每个有限状态机准备一个表格。
4. 每个状态的二进制编码列表（每个有限状态机一个）。
5. 使用你的二进制编码的表格的修订副本。
6. 根据前一个状态和输入，为下一个状态的输出和每个位编写的布尔逻辑方程。
7. 打印两份你的仿真波形：一份展示你玩游戏并获胜（进入“胜利宝库”），另一份展示你输掉游戏的示例（进入“悲惨墓地”）。你的信号必须按以下顺序打印：CLK、R、N、S、E、W、S6:0、SW、D、V、WIN。（如果你忘记了如何格式化测试台波形输出文件，下一页的注释将介绍如何格式化。）打印之前，请在“打印设置”下选择“横向”，以便它们在页面上更适合显示。
8. 你的设计和测试台的 Verilog 代码文件。
9. 额外提示：鲜为人知的是，蜿蜒隧道位于食堂地下，向北走可以到达宿舍。你可以用更多有趣的房间或物品来扩展你的冒险游戏。最有趣的工作改进将获得奖励！
